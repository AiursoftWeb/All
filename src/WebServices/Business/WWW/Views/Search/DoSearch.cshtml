@using Microsoft.Azure.CognitiveServices.Search.WebSearch.Models
@using SearchResponse = Microsoft.Azure.CognitiveServices.Search.EntitySearch.Models.SearchResponse
@using System.Globalization
@model Microsoft.Azure.CognitiveServices.Search.WebSearch.Models.SearchResponse
@{
    ViewData["Title"] = Model.QueryContext.OriginalQuery;
    ViewData["NoNav"] = "true";
    SearchResponse entities = ViewBag.Entities;
}
<nav class="navbar navbar-expand-md navbar-light bg-white fixed-top">
    <div class="container">
        <a class="navbar-brand" href="/">
            @Values.ProjectName
        </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#aiursoft-navbar" aria-controls="aiursoft-navbar" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="aiursoft-navbar">
            <div class="navbar-nav mr-auto w-100">
                <form class="form-row w-100" asp-controller="Search" asp-action="DoSearch" method="get">
                    <div class="col-12 col-md-9 mb-2 mb-md-0">
                        <input type="search" results="7" list="auto-complete" autosave="www-search-input" name="q" class="form-control form-control-lg" autofocus required pattern=".*\S+.*" title="This field is required" value="@Model.QueryContext.OriginalQuery">
                        <datalist id="auto-complete"></datalist>
                    </div>
                </form>
            </div>
            <div class="form-inline">
                <ul class="navbar-nav mr-auto" style="min-width:120px;">
                    @if (SignInManager.IsSignedIn(User))
                    {
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" id="dropdown02" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                @await UserImageGenerator.RenderUserImageAsync(User)
                            </a>
                            <div class="dropdown-menu" aria-labelledby="dropdown02">
                                <a class="dropdown-item" href="@ServiceLocation.Account">@Localizer["Settings"]</a>
                                <a class="dropdown-item" data-toggle="modal" data-target="#logout-modal">@Localizer["Sign out"]</a>
                            </div>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item active">
                            <a class="nav-link" asp-controller="Auth" asp-action="GoAuth">
                                @Localizer["Sign in"]
                            </a>
                        </li>
                        <li class="nav-item active">
                            <a class="nav-link" asp-controller="Auth" asp-action="GoRegister">
                                @Localizer["Sign up"]
                            </a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
</nav>

<div class="container">
    <div class="row pt-5">
        <div class="col-md-8">
            <div class="text-muted">
                @{
                    var langLink = new AiurUrl(DirectoryLocator.Value.Instance, "/set-language", new { });
                }
                @Localizer["Current search language:"]
                <a href="@langLink" data-language-change-link>
                    @CultureInfo.CurrentCulture.NativeName
                </a>
                <div class=" float-right">
                    @Localizer["Results: About"] @(Model.WebPages?.TotalEstimatedMatches ?? 0).
                </div>
            </div>
            @if (!string.IsNullOrWhiteSpace(Model.QueryContext.AlteredQuery))
            {
                <h5>Showing results for <a asp-route-q="@Model.QueryContext.AlteredQuery">@Model.QueryContext.AlteredQuery</a>.</h5>
                <p>Search instead for <a asp-route-q="+@Model.QueryContext.OriginalQuery">@Model.QueryContext.OriginalQuery</a>.</p>
            }
            @if (Model.RankingResponse?.Mainline != null)
            {
                @foreach (var response in Model.RankingResponse.Mainline.Items)
                {
                    @if (response.AnswerType == "WebPages" && Model.WebPages != null)
                    {
                        <vc:web-page page="@Model.WebPages.Value[response.ResultIndex ?? 0]"></vc:web-page>
                    }
                    else if (response.AnswerType == "RelatedSearches")
                    {
                        <vc:related related="@Model.RelatedSearches"></vc:related>
                    }
                    else if (response.AnswerType == "Videos")
                    {
                        <vc:videos videos="@Model.Videos"></vc:videos>
                    }
                    else if (response.AnswerType == "Images")
                    {
                        <vc:images images="@Model.Images"></vc:images>
                    }
                }
            }
            else
            {
                <h3>There are no results for <b>@Model.QueryContext.OriginalQuery</b>.</h3>
            }
        </div>
        @if (Model.RankingResponse?.Sidebar?.Items != null && Model.RankingResponse.Sidebar.Items.Any())
        {
            <div class="col-md-4">
                @foreach (var sidebar in Model.RankingResponse.Sidebar.Items)
                {
                    if (sidebar.AnswerType == "Entities")
                    {
                        if (entities.Entities?.Value != null)
                        {
                            if (entities.Entities.Value.Count > sidebar.ResultIndex)
                            {
                                <vc:entity entity="@entities.Entities.Value[sidebar.ResultIndex ?? 0]"></vc:entity>
                            }
                        }
                    }
                }
            </div>
        }
    </div>
    @if (Model.WebPages?.Value?.Count > 0)
    {
        <div class="pl-1 mt-4">
            @{
                var count = int.MaxValue;
                if ((Model.WebPages?.TotalEstimatedMatches ?? 0) < int.MaxValue)
                {
                    count = (int)(Model.WebPages?.TotalEstimatedMatches ?? 0);
                }
            }
            @Html.PagedListPager(new StaticPagedList<WebPage>(Model.WebPages?.Value ?? new List<WebPage>(), (int)ViewBag.CurrentPage, 10, count), page => Url.Action("DoSearch", new { q = Model.QueryContext.OriginalQuery, page }))
        </div>
    }
</div>